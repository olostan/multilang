apply plugin: 'java'
apply plugin: 'com.google.protobuf'
apply plugin: 'application'
apply plugin: 'docker'

buildscript {
  repositories {
    mavenCentral()
  }
  dependencies {
    classpath 'com.google.protobuf:protobuf-gradle-plugin:0.7.1'
    classpath 'se.transmode.gradle:gradle-docker:1.1'
  }
}

dependencies {
  compile 'io.grpc:grpc-all:0.9.0'
}

sourceSets {
    main {
        proto {
            srcDir '../renderer/src/renderer/proto'
        }
    }
}

protobuf {
  repositories {
    mavenCentral()
  }

  protoc {
    // The version of protoc must match protobuf-java. If you don't depend on
    // protobuf-java directly, you will be transitively depending on the
    // protobuf-java version that grpc depends on.
    //artifact = "com.google.protobuf:protoc:3.0.0-alpha-3"
    artifact = 'com.google.protobuf:protoc:3.0.0-beta-1'
  }
  plugins {
    grpc {
      artifact = 'io.grpc:protoc-gen-grpc-java:0.9.0'
    }
  }
  generateProtoTasks {
    all()*.plugins {
      grpc {}
    }
  }
}

task dispatcherServer(type: CreateStartScripts) {
    mainClassName = "name.olostan.dispatcher.DispatcherServer"
    applicationName = "dispatcher-server"
    outputDir = new File(project.buildDir, 'tmp')
    classpath = jar.outputs.files + project.configurations.runtime
}
applicationDistribution.into("bin") {
    from(dispatcherServer)
    fileMode = 0755
}
<<<<<<<< Workspace
targetCompatibility = 7
|||||||| Baseline
targetCompatibility = 8
========
targetCompatibility = 7
sourceCompatibility = 7
>>>>>>>> Alias
/*
docker {
    baseImage "java:7"
    maintainer 'Valentyn Shybanov "olostan@gmail.com"'
}
distDocker {
    setEnvironment "RENDERER","renderer"
}

distDocker {
    exposePort  50051
}*/

//startScripts {
    mainClassName = 'name.olostan.dispatcher.DispatcherServer'
//}