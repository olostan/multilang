// Code generated by protoc-gen-go.
// source: renderer.proto
// DO NOT EDIT!

/*
Package renderer is a generated protocol buffer package.

It is generated from these files:
	renderer.proto

It has these top-level messages:
	RenderRequest
	RenderResponse
*/
package renderer

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type RenderRequest struct {
	Texture          []byte `protobuf:"bytes,1,req,name=texture" json:"texture,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *RenderRequest) Reset()                    { *m = RenderRequest{} }
func (m *RenderRequest) String() string            { return proto.CompactTextString(m) }
func (*RenderRequest) ProtoMessage()               {}
func (*RenderRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *RenderRequest) GetTexture() []byte {
	if m != nil {
		return m.Texture
	}
	return nil
}

type RenderResponse struct {
	Image            []byte `protobuf:"bytes,2,req,name=image" json:"image,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *RenderResponse) Reset()                    { *m = RenderResponse{} }
func (m *RenderResponse) String() string            { return proto.CompactTextString(m) }
func (*RenderResponse) ProtoMessage()               {}
func (*RenderResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *RenderResponse) GetImage() []byte {
	if m != nil {
		return m.Image
	}
	return nil
}

func init() {
	proto.RegisterType((*RenderRequest)(nil), "renderer.RenderRequest")
	proto.RegisterType((*RenderResponse)(nil), "renderer.RenderResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// Client API for Renderer service

type RendererClient interface {
	Render(ctx context.Context, in *RenderRequest, opts ...grpc.CallOption) (*RenderResponse, error)
}

type rendererClient struct {
	cc *grpc.ClientConn
}

func NewRendererClient(cc *grpc.ClientConn) RendererClient {
	return &rendererClient{cc}
}

func (c *rendererClient) Render(ctx context.Context, in *RenderRequest, opts ...grpc.CallOption) (*RenderResponse, error) {
	out := new(RenderResponse)
	err := grpc.Invoke(ctx, "/renderer.Renderer/Render", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Renderer service

type RendererServer interface {
	Render(context.Context, *RenderRequest) (*RenderResponse, error)
}

func RegisterRendererServer(s *grpc.Server, srv RendererServer) {
	s.RegisterService(&_Renderer_serviceDesc, srv)
}

func _Renderer_Render_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(RenderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(RendererServer).Render(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _Renderer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "renderer.Renderer",
	HandlerType: (*RendererServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Render",
			Handler:    _Renderer_Render_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}

var fileDescriptor0 = []byte{
	// 146 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0xe2, 0x2b, 0x4a, 0xcd, 0x4b,
	0x49, 0x2d, 0x4a, 0x2d, 0xd2, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x80, 0xf1, 0x95, 0x14,
	0xb8, 0x78, 0x83, 0xc0, 0xec, 0xa0, 0xd4, 0xc2, 0xd2, 0xd4, 0xe2, 0x12, 0x21, 0x7e, 0x2e, 0xf6,
	0x92, 0xd4, 0x8a, 0x92, 0xd2, 0xa2, 0x54, 0x09, 0x46, 0x05, 0x26, 0x0d, 0x1e, 0x25, 0x79, 0x2e,
	0x3e, 0x98, 0x8a, 0xe2, 0x82, 0xfc, 0xbc, 0xe2, 0x54, 0x21, 0x5e, 0x2e, 0xd6, 0xcc, 0xdc, 0xc4,
	0xf4, 0x54, 0x09, 0x26, 0x90, 0x02, 0x23, 0x4f, 0x2e, 0x8e, 0x20, 0xa8, 0x71, 0x42, 0xb6, 0x5c,
	0x6c, 0x10, 0xb6, 0x90, 0xb8, 0x1e, 0xdc, 0x4e, 0x14, 0x0b, 0xa4, 0x24, 0x30, 0x25, 0x20, 0xe6,
	0x2a, 0x31, 0x38, 0x89, 0x73, 0x89, 0xe6, 0x25, 0xe6, 0xa6, 0xea, 0xe5, 0xe7, 0xe4, 0x17, 0x97,
	0x24, 0xe6, 0xc1, 0x55, 0x02, 0x02, 0x00, 0x00, 0xff, 0xff, 0xe0, 0xe0, 0xdb, 0xf9, 0xc1, 0x00,
	0x00, 0x00,
}
